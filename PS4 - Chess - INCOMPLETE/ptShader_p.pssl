/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 04.008.061
* Copyright (C) 2013 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "ptShaderConstants.h"
#include "ptVSOutput.hs"
#include "ptLightCount.h"

SamplerState l_samp0 : register(s0);
Texture2D l_colourMap : register(t0);

float4 main(ptVSOutput _input) : S_TARGET_OUTPUT
{
	//material parameters
	float l_materialSpecularPower = 50.0;
	float l_materialSpecularStrength = 1.0;


	//totals
	float3 l_ambientOutput = float3(0,0,0);
	float3 l_diffuseOutput = float3(0,0,0);
	float3 l_specularOutput = float3(0,0,0);
	float3 l_totalOutput = float3(0,0,0);
	for(int i = 0; i < __PT_LIGHT_COUNT__; i++)
	{
		float l_distanceAttn = 1;
		float l_spotAttn = 1;

		//pre-calculations
		float3 l_surfaceLightVx = float3 (1,0,0);
		if (shc_lightLocationVX[i].w == 0)
		{
			l_surfaceLightVx = normalize(float3(shc_lightLocationVX[i].xyz));
		}
		else 
		{
			float3 t_surfaceLightVx = float3(shc_lightLocationVX[i].xyz) - _input.m_positionWorld;
			l_surfaceLightVx = normalize(t_surfaceLightVx);
			float t_distance = length(t_surfaceLightVx);
			l_distanceAttn = 1/(shc_lightAttenuationVx[i].x + (shc_lightAttenuationVx[i].y * t_distance) + (shc_lightAttenuationVx[i].z * t_distance * t_distance));
			if (shc_lightSpotDirectionVx[i].w >= 1.0)
			{
				float3 t_lightIncidentVx = - l_surfaceLightVx;
				float t_cosine = dot(t_lightIncidentVx, normalize(float3(shc_lightSpotDirectionVx[i].xyz)));
				if (t_cosine < shc_lightSpotDirectionVx[i].w)
				{
					l_spotAttn = 0;
				}
			}//if
		}//else

		//ambient
		l_ambientOutput += saturate(_input.m_colour * float3(shc_lightColourVx[i].xyz) * shc_lightADSVx[i].x); 
	
		//diffuse
		float l_diffuseIntensity = dot( l_surfaceLightVx, normalize(_input.m_normal));
		if (l_diffuseIntensity > 0)
		{
			l_diffuseOutput += saturate(_input.m_colour * float3(shc_lightColourVx[i].xyz) * l_diffuseIntensity * shc_lightADSVx[i].y);
		}

		//specular
		if (l_diffuseIntensity > 0)
		{
			float3 t_lightIncidentVx = - l_surfaceLightVx;
			float3 t_reflectedVx = normalize(reflect(t_lightIncidentVx, _input.m_normal));
			float3 t_vertexToCameraVx = normalize(shc_cameraPositionWorldVx[i].xyz -  _input.m_positionWorld);
			float t_specularIntensity = saturate(dot(t_reflectedVx, t_vertexToCameraVx));
			t_specularIntensity = l_materialSpecularStrength * pow(t_specularIntensity, l_materialSpecularPower);
			l_specularOutput += saturate(float3(shc_lightColourVx[i].xyz) * t_specularIntensity * shc_lightADSVx[i].z);
		}//if

		//totals
		l_ambientOutput *= l_spotAttn;
		l_diffuseOutput *= l_spotAttn;
		l_specularOutput *= l_spotAttn;
	}
	l_totalOutput = saturate(l_ambientOutput + l_diffuseOutput + l_specularOutput);
	return float4(l_totalOutput, 1.0f) * l_colourMap.Sample(l_samp0, _input.m_texcoord);
	// return l_colourMap.Sample(l_samp0, _input.m_texcoord) * float4(_input.m_colour, 1.0f);
}//main()



/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 04.008.061
* Copyright (C) 2013 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

/*#include "ptShaderConstants.h"
#include "ptVSOutput.hs"

SamplerState l_samp0 : register(s0);
Texture2D l_colourMap : register(t0);

float4 main(ptVSOutput _input) : S_TARGET_OUTPUT
{
	//material parameters
	float l_materialSpecularPower = 50.0;
	float l_materialSpecularStrength = 1.0;

	//light parameters
	float3 l_lightColour = float3(1,1,1);
	float l_lightAmbientFactor = 0.02;
	float3 l_lightLocationVx = float3(-1, 0, 0);
	float l_lightDiffuseFactor = 1.0;
	float l_lightSpecularFactor = 1.0;
	bool l_lightIsInfinite = false;
	bool l_lightIsDirectional = true;
	float3 l_lightDirectionVx = float3(0,0,0);
	float l_lightSpotAngleCos = 0.985;

	float l_lightFixedAttnFactor = 0.0;
	float l_lightLinearAttnFactor = 0.0;
	float l_lightQuadAttnFactor = 0.25;

	//totals
	float3 l_ambientOutput = float3(0,0,0);
	float3 l_diffuseOutput = float3(0,0,0);
	float3 l_specularOutput = float3(0,0,0);
	float3 l_totalOutput = float3(0,0,0);
	float l_distanceAttn = 1;
	float l_spotAttn = 1;

	//pre-calculations
	float3 l_surfaceLightVx = float3 (1,0,0);
	if (l_lightIsInfinite)
	{
		l_surfaceLightVx = normalize(l_lightLocationVx);
	}
	else 
	{
		float3 t_surfaceLightVx = l_lightLocationVx - _input.m_positionWorld;
		l_surfaceLightVx = normalize(t_surfaceLightVx);
		float t_distance = length(t_surfaceLightVx);
		l_distanceAttn = 1/(l_lightFixedAttnFactor + (l_lightLinearAttnFactor * t_distance) + (l_lightQuadAttnFactor * t_distance * t_distance));
		if (l_lightIsDirectional)
		{
			float3 t_lightIncidentVx = - l_surfaceLightVx;
			float t_cosine = dot(t_lightIncidentVx, normalize(l_lightDirectionVx));
			if (t_cosine < l_lightSpotAngleCos) l_spotAttn = 0;

		}//if
	}//else

	//ambient
	l_ambientOutput += saturate(_input.m_colour * l_lightColour * l_lightAmbientFactor); 
	
	//diffuse
	float l_diffuseIntensity = dot( l_surfaceLightVx, normalize(_input.m_normal));
	if (l_diffuseIntensity > 0)
	{
		l_diffuseOutput += saturate(_input.m_colour * l_lightColour * l_diffuseIntensity * l_lightDiffuseFactor);
	}

	//specular
	if (l_diffuseIntensity >0)
	{
		float3 t_lightIncidentVx = - l_surfaceLightVx;
		float3 t_reflectedVx = normalize(reflect(t_lightIncidentVx, _input.m_normal));
		float3 t_vertexToCameraVx = normalize(shc_cameraPositionWorldVx.xyz -  _input.m_positionWorld);
		float t_specularIntensity = saturate(dot(t_reflectedVx, t_vertexToCameraVx));
		t_specularIntensity = l_materialSpecularStrength * pow(t_specularIntensity, l_materialSpecularPower);
		l_specularOutput += saturate(l_lightColour * t_specularIntensity * l_lightSpecularFactor);
	}//if

	//totals
	l_ambientOutput *= l_spotAttn;
	l_diffuseOutput *= l_spotAttn;
	l_specularOutput *= l_spotAttn;
	l_totalOutput = saturate(l_ambientOutput + l_diffuseOutput + l_specularOutput);
	l_totalOutput *= l_colourMap.Sample(l_samp0, _input.m_texcoord);
	return float4(l_totalOutput, 1.0f);
	// return l_colourMap.Sample(l_samp0, _input.m_texcoord) * float4(_input.m_colour, 1.0f);
}//main()*/